马哥教育 Wayne老师 
腾讯课堂，免费版 https://ke.qq.com/course/134017


静态ip,则要配合vmware虚拟网络设置的参数，在/etc/sysconfig/network-scripts/ifcfg-***设置为：
  1 TYPE=Ethernet
  2 BOOTPROTO=static
  3 IPADDR=192.168.148.131
  4 GATEWAY=192.168.148.2
  5 NETMASK=255.255.255.0
  6 DEVICE=ens33
  7 ONBOOT=yes
                   
编辑默认网关：vim /etc/resolv.conf
  1 # Generated by NetworkManager
  2 nameserver 192.168.148.2                      

重启网络  systemctl restart network.service

安装pyenv环境，用于管理多个python版本，python用户开发环境使用，不要随便去升级修改系统默认的python版本和环境
1. root安装git: #yum install git -y
2. root安装Python编译依赖 #yum -y install gcc make patch gdbm-devel openssl-devel sqlite-devel readline-devel zlib-devel bzip2-devel
3. root创建用户python #useradd python
4. 切换到python用户
5. python用户curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
6. 运行完后，得到提示：
	WARNING: seems you still have not added 'pyenv' to the load path.

	# Load pyenv automatically by adding
	# the following to ~/.bash_profile:

	export PATH="/home/python/.pyenv/bin:$PATH"
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
7. #vim ~/.bash_profile, 将下面三行代码加到最后，目的就是开机自动运行pyenv
	export PATH="/home/python/.pyenv/bin:$PATH"
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
8. 在python用户下，输入pyenv命令查看pyenv的一些特性，注意instal命令，可以用来安装不同版本的python作为开发环境
9. pyenv help install可以查看instal相关的帮助
10. pyenv install 3.6.3 -v 从官网下载3.6.3的python开始编译安装，-v是实时显示详细的编译进度
11. 安装完成会提示：Installed Python-3.6.3 to /home/python/.pyenv/versions/3.6.3
12. 在python家目录，cd .pyenv， 然后ls
	versions是所有通过pyenv安装的python版本
	plugins是所有插件
13. 如果因网速太慢， pyenv install 3.6.3 -v无法成功安装的话，可以先下载安装包（3个，安装的时候linux会三选一），然后在plugins文件夹创建文件夹cache，把安装包ftp到cache文件夹。
	然后回到.pyenv文件夹，输入pyenv install 3.6.3 -v离线安装即可
14. [python@localhost ~]$ pyenv version
	system (set by /home/python/.pyenv/version)
	[python@localhost ~]$ pyenv versions      pyenv环境当前使用的版本，目前还是系统的python
	* system (set by /home/python/.pyenv/version)
	  3.6.3
15. [python@localhost ~]$ pyenv global 3.6.3    切换版本到3.6.3，这时候输入python将会进入3.6.3版本，这样只会影响python用户，对其他用户没有任何影响，因为pyenv是安装在python用户下的
	[python@localhost ~]$ pyenv version
	3.6.3 (set by /home/python/.pyenv/version)
	[python@localhost ~]$ pyenv versions
	  system
	* 3.6.3 (set by /home/python/.pyenv/version)
16. [python@localhost ~]$ pyenv global system  切换回去系统的python，这时候输入python会进入系统默认的2.7版本
17. pyenv shell 3.6.3 当前shell切换到3.6.3，不会影响其他shell
18. pyenv local 3.6.3 只设置当前文件夹及子文件夹使用这个版本，其他文件夹不会被影响，这样有利于多个不同版本的项目开发，但是会有环境依赖包的问题

在虚拟环境里装各个版本的python,安装的各种包不会互相影响
首先创建实验文件夹结构：
[python@localhost ~]$ mkdir -p magedu/projects/cmdb/
[python@localhost cmdb]$ pwd
/home/python/magedu/projects/cmdb     文件夹结构
然后开始创建虚拟版本：
[python@localhost cmdb]$ pyenv virtualenv 3.6.3 mag363    用3.6.3衍生出一个虚拟的版本，名叫mag363
Requirement already satisfied: setuptools in /home/python/.pyenv/versions/3.6.3/envs/mag363/lib/python3.6/site-packages
Requirement already satisfied: pip in /home/python/.pyenv/versions/3.6.3/envs/mag363/lib/python3.6/site-packages
[python@localhost cmdb]$ pyenv versions
* system (set by PYENV_VERSION environment variable)
  3.6.3
  3.6.3/envs/mag363			和下面的mag363是一个
  mag363					这里就是衍生出来的虚拟环境
[python@localhost cmdb]$ cd ..
[python@localhost projects]$ mkdir test
[python@localhost projects]$ cd test
[python@localhost test]$ pyenv local mag363   test文件夹切换成mag363虚拟环境
这时候需要退出再登录，只要再进入test文件夹，就会是虚拟环境mag363来管理python版本，以后装的所有东西都会装到mag363中去，就不会装到3.6.3的大目录中去了，因此就不会有冲突
[python@localhost projects]$ cd test/
(mag363) [python@localhost test]$ pyenv local  查看test文件夹的python环境
mag363			是mag363的虚拟环境
接下来去找mag363的安装包都会装在哪里
(mag363) [python@localhost test]$ cd ~/.pyenv
[python@localhost .pyenv]$ ls
bin    CHANGELOG.md  completions  libexec  Makefile  pyenv.d    shims  terminal_output.png  version
cache  COMMANDS.md   CONDUCT.md   LICENSE  plugins   README.md  src    test                 versions
[python@localhost .pyenv]$ cd versions/
[python@localhost versions]$ ls
3.6.3  mag363
[python@localhost versions]$ ll
total 0
drwxr-xr-x. 7 python python 68 Jun 10 22:26 3.6.3
lrwxrwxrwx. 1 python python 46 Jun 10 22:26 mag363 -> /home/python/.pyenv/versions/3.6.3/envs/mag363     这里可以看到mag363是一个软连接，指向了3.6.3下面的一个目录
[python@localhost versions]$ cd 3.6.3/
[python@localhost 3.6.3]$ ll
total 4
drwxr-xr-x. 2 python python 4096 Jun 10 20:21 bin
drwxrwxr-x. 3 python python   20 Jun 10 22:26 envs
drwxr-xr-x. 3 python python   24 Jun 10 20:21 include
drwxr-xr-x. 4 python python   63 Jun 10 20:21 lib        这个文件夹比较重要
drwxr-xr-x. 3 python python   17 Jun 10 20:21 share

/home/python/.pyenv/versions/3.6.3/lib/python3.6   这个文件夹下面的site-packages保存的是3.6.3版本环境下安装的所有的包，但是所有用户的包都装到这里来就乱套了
现在知道了某个版本的python所有的安装包都在目录：/home/python/.pyenv/versions/3.6.3/lib/python3.6/site-packages
到/3.6.3/envs/mag363 去看一下
[python@localhost site-packages]$ pwd
/home/python/.pyenv/versions/3.6.3/envs/mag363/lib/python3.6/site-packages
同样在env文件夹下，也找到了相同的文件夹结构，虚拟环境mag363所有的安装包都在site-packages这里
这样就真正做到了隔离，只需要把某个文件夹设置成pyenv local mag363，那就是属于mag363的项目了

再次cd到test目录
(mag363) [python@localhost test]$ pip install ipython 安装ipython编辑器
(mag363) [python@localhost test]$ pip install jupyter 安装jupyter可视化编辑器，可以保存所有的代码，有自己的数据库的
现在来检查一下这两个工具安装到哪里去了
/home/python/.pyenv/versions/3.6.3/envs/mag363/lib/python3.6/site-packages 在这里
/home/python/.pyenv/versions/3.6.3/lib/python3.6/site-packages
到这里为止，pyenv管理器以及pyenv的虚拟环境就安装好了

总结：
pyenv是一个python版本管理器，为了不影响root用户和其他正常用户，需要新建一个python用户，目的是所有的测试都会再python用户里面进行，pyenv可以自由切换各个python版本
相关的命令，pyenv可以调出所有命令，其中比较重要的命令：pyenv commands 3.6.3，使用帮助：[python@localhost ~]$ pyenv help install
commands    List all available pyenv commands
local      设置某个文件夹及子文件夹的python版本
global     设置本用户的python版本   pyenv global system可以切换回系统默认python版本
shell      设置当前shell的python版本
install    安装某个python版本
version    Show the current Python version and its origin
versions   List all Python versions available to pyenv

虚拟环境：
[python@localhost cmdb]$ pyenv virtualenv 3.6.3 mag363   用3.6.3衍生出一个虚拟的版本，名叫mag363
[python@localhost test]$ pyenv local mag363   test文件夹切换成mag363虚拟环境，新建一个ssh，再进入test文件夹，则有mag363管理：(mag363) [python@localhost test]$

使用jupyter帮助：(mag363) [python@localhost test]$ jupyter notebook --help
(mag363) [python@localhost test]$ jupyter notebook password   设置jupyter密码123456
Enter password: 
Verify password: 
[NotebookPasswordApp] Wrote hashed password to /home/python/.jupyter/jupyter_notebook_config.json
(mag363) [python@localhost test]$ jupyter notebook   启动notebook
默认情况下，是localhost才能访问，因为是ssh上去的，所以默认是无法访问的，需要先绑定IP地址，端口就默认8888
(mag363) [python@localhost test]$ jupyter notebook --ip=0.0.0.0	  绑定所有IP，也可以指定一个IP绑定
现在外面计算机可以访问这台服务器了，浏览器输入http://192.168.148.131:8888，提示输入密码123456就可以开始使用了
两个ctrl+c即可退出

pip导出包
(mag363) [python@localhost test]$ cd ../
[python@localhost projects]$ ls
cmdb  test
[python@localhost projects]$ mkdir test2   再建一个测试文件夹
[python@localhost test2]$ pyenv virtualenv 3.6.3 test2   再虚拟化一个环境出来
Requirement already satisfied: setuptools in /home/python/.pyenv/versions/3.6.3/envs/test2/lib/python3.6/site-packages
Requirement already satisfied: pip in /home/python/.pyenv/versions/3.6.3/envs/test2/lib/python3.6/site-packages
[python@localhost test2]$ pyenv versions
* system (set by /home/python/.pyenv/version)
  3.6.3
  3.6.3/envs/mag363
  3.6.3/envs/test2
  mag363
  test2
[python@localhost test2]$ pyenv local test2   指定虚拟环境
(test2) [python@localhost test2]$ pyenv local
test2
(test2) [python@localhost test2]$ cd ../test
(mag363) [python@localhost test]$ pip -help   查看帮助，导出pip包
(mag363) [python@localhost test]$ pip freeze > pip_bak
(mag363) [python@localhost test]$ cat pip_bak   就能看到导出来的包目录
(mag363) [python@localhost test]$ cd ../test2
(test2) [python@localhost test2]$ pip list   先看一下这个test2的pip包
(test2) [python@localhost test2]$ pip install -r ../test/pip_bak 直接导入即可，相当于复制



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	