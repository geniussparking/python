参考：http://www.cnblogs.com/wupeiqi/articles/5115190.html
一、counter()计数器
已经学过：列表 元组 字典 集合（其实也是字典）
缺点：
列表，元组：不知道里面的元素的类型是什么；有序；
字典：无序；
set: 无序；
counter：是对字典类型的补充，用于追踪值的出现次数；
用之前要先导入：import collections

#!/usr/bin/env python
import collections    #导入这个文件夹，Python就能自动去这个文件夹找counter这个类了，counter这个类又有很多方法,然后就可以用counter创建对象了
obj = collections.Counter('aabbbasd1122afd')
print("打印obj的类型：",type(obj))
print("打印obj这个对象：",obj)
print("打印obj中出现次数最多的前四个元素：",obj.most_common(4))  #4是参数，不传参数会打印所有
#print(obj.elements())  #这里打印出<itertools.chain object at 0x0000024653737A58>，不知道是什么
print("打印出obj中所有元素，（未加工）：")
for i in obj.elements():  # elements()方法取出obj中所有的元素
    print(i)
print("打印出obj中所有的键值对，注意这里的obj是counter创建出来的对象，是字典类型：")
for k,v in obj.items():   # 实际上，这里的items方法是字典里的，因为Counter是继承了字典的类的，所以也就继承了字典的所有方法，源码里面是这样写的：class Counter(dict):
    print(k,v)             # 所以这里的counter实际上有字典的所有方法，包含：items, keys, values, 其实只要是字典形式的数据，应该都是有字典的所有方法
print("使用update方法更新原来的counter以后，原来有的元素继续counter,没有的就加进去counter：")
print("没有update之前：",obj)
obj.update(['a','obama','xiaoping'])
print("update之后，用subtract删除之前：",obj)
obj.subtract(['a','obama','xiaoping'])
print("用subtract删除元素之后:",obj)
obj.subtract(['a','obama','xiaoping'])
print("再删除一次：",obj)

E:\python3\python.exe E:/pythonprojects/login/test.py
打印obj的类型： <class 'collections.Counter'>
打印obj这个对象： Counter({'a': 4, 'b': 3, 'd': 2, '1': 2, '2': 2, 's': 1, 'f': 1})
打印obj中出现次数最多的前四个元素： [('a', 4), ('b', 3), ('d', 2), ('1', 2)]
打印出obj中所有元素，（未加工）：
a
a
a
a
b
b
b
s
d
d
1
1
2
2
f
打印出obj中所有的键值对，注意这里的obj是counter创建出来的对象，是字典类型：
a 4
b 3
s 1
d 2
1 2
2 2
f 1
使用update方法更新原来的counter以后，原来有的元素继续counter,没有的就加进去counter：
没有update之前： Counter({'a': 4, 'b': 3, 'd': 2, '1': 2, '2': 2, 's': 1, 'f': 1})
update之后，用subtract删除之前： Counter({'a': 5, 'b': 3, 'd': 2, '1': 2, '2': 2, 's': 1, 'f': 1, 'obama': 1, 'xiaoping': 1})
用subtract删除元素之后: Counter({'a': 4, 'b': 3, 'd': 2, '1': 2, '2': 2, 's': 1, 'f': 1, 'obama': 0, 'xiaoping': 0})
再删除一次： Counter({'a': 3, 'b': 3, 'd': 2, '1': 2, '2': 2, 's': 1, 'f': 1, 'obama': -1, 'xiaoping': -1})

Process finished with exit code 0


二、有序字典 orderedDict
有序字典的实现原理：使用列表来维护k就行了
#!/usr/bin/env python
dic = {'k3':'v3','k2':'v2','k1':'v1'}   #注意：这里的字典虽然看起来有序，实际上是无序的
li = ['k1','k2','k3']   #列表是有序的
dic_new = {}
for i in li:
    dic_new.update({i:dic[i]})
print(dic_new)
打印出：
D:\Python36\python.exe D:/pythonproject/d1/test111.py
{'k1': 'v1', 'k2': 'v2', 'k3': 'v3'}

Process finished with exit code 0
实例：
#!/usr/bin/env python
import collections
dic = collections.OrderedDict()
#dic=dict()
print(dic)              #此时打印出：OrderedDict()
print(type(dic))        # 打印<class 'collections.OrderedDict'>
#dic.update({'k2':'v2','k1':'v1','k3':'v3'})
dic['k2']='v2'
dic['k1']='v1'
dic['k4']='v4'
dic['k3']='v3'
print(dic)              # 打印OrderedDict([('k2', 'v2'), ('k1', 'v1'), ('k4', 'v4'), ('k3', 'v3')])，是有序的，按照键排序
print(dic.popitem())    # 从最后一个元素开始，一个个弹出
print(dic)
print(dic.move_to_end('k2'))
print(dic)
dic.setdefault('k5','66')
print(dic)

输出：
D:\Python36\python.exe D:/pythonproject/d1/test111.py
OrderedDict()
<class 'collections.OrderedDict'>
OrderedDict([('k2', 'v2'), ('k1', 'v1'), ('k4', 'v4'), ('k3', 'v3')])
('k3', 'v3')
OrderedDict([('k2', 'v2'), ('k1', 'v1'), ('k4', 'v4')])
None
OrderedDict([('k1', 'v1'), ('k4', 'v4'), ('k2', 'v2')])
OrderedDict([('k1', 'v1'), ('k4', 'v4'), ('k2', 'v2'), ('k5', '66')])

Process finished with exit code 0

有序字典的一些方法：跟字典的方法基本一样
pop(k) 弹出一个，指定键值弹出指定的元素
popitem() 最后插入的那个元素，后进先出，内存的栈就是这个原理
move_to_end('k2') 将某个元素放到最后去
setdefault('k5','66') 设置默认值，将k5设置成66
dic.update({'k6':88,'k7':'88'})  update()方法是要传入一个字典

三、默认字典(defaultdict) 

defaultdict是对字典的类型的补充，他默认给字典的值设置了一个类型。
dic = dict({'k1':[]})   #这里要指定类型下面才能append，因为append是列表的方法
dic['k1'].append('a')   
print(dic)              #实际上这里打印出来的是：{'k1': ['a']}
print(type(dic))

使用默认字典：
#!/usr/bin/env python
import collections
dic = collections.defaultdict(list)
print(type(dic))
dic['k1'].append('alex')
print(dic)              #打印：defaultdict(<class 'list'>, {'k1': ['alex']})

上一节的例子：
values = [11,22,33,44,55,66,77,88,99,90]
将values里的值按照条件放进一个字典
之前这么写：
#!/usr/bin/env python
dic = {}                                     #初始化一个字典
li_all = [11,22,33,44,55,66,77,88,99,90,]    #这里是需要处理的数据集合
for i in li_all:                             #使用for循环依次取出列表中的数据，等待处理
    if i > 66:
        if 'k1' in dic.keys():               #使用keys()方法取出字典里的键，用if in语句来判断'k1'是否已经存在
            dic['k1'].append(i)              #如果存在，直接使用列表的append()方法，将符合要求的值加进列表
        else:
            dic['k1'] = [i,]                 #如果键'k1'不存在则创建一个列表
    else:
        if 'k2' in dic.keys():              
            dic['k2'].append(i)
        else:
            dic['k2'] = [i,]
print(dic)                                   #这个例子说明，字典里面是可以放列表的，涉及到字典和列表的方法，比较灵活

现在有了默认字典，可以这么写：
#!/usr/bin/env python
import collections
values = [11,22,33,44,55,66,77,88,99,90]
dic = collections.defaultdict(list)    #这里直接指定类型，后面就比较好用list的方法了
print(dic)
for i in values:
    if i >= 66:
        dic['k2'].append(i)
    else:
        dic['k1'].append(i)
print(dic)

输出：
D:\Python36\python.exe D:/pythonproject/d1/test111.py
defaultdict(<class 'list'>, {})
defaultdict(<class 'list'>, {'k1': [11, 22, 33, 44, 55], 'k2': [66, 77, 88, 99, 90]})

Process finished with exit code 0

四、可命名元组(namedtuple) 
根据nametuple可以创建一个包含tuple所有功能以及其他功能的类型。
t = (11,22,33,44)
正常情况只能根据索引t[0]这样去访问元组里面的元素；
可命名元组提供了可以通过名字去访问元组里面的元素

#!/usr/bin/env python
import collections
# 先创建类(python没有创建，所以要自己创建)
MytupleClass = collections.namedtuple('MytupleClass', ['x', 'y', 'z'])
# 再创建对象
obj = MytupleClass(11,22,33)  #这里相当于说x=11, y=22, z=33
print(obj)  # 打印出：MytupleClass(x=11, y=22, z=33)
print(obj.x)    # 这样去访问元素，注意不是 obj[x], 结果打印出 11
print(obj.y)
print(obj.z)
#想要查看MytupleClass有哪些方法，可以用下面的方法：
print(help(MytupleClass))

五、队列(deque，queue)  
单向队列queue：这边进，那边出；先进先出
双向队列dque：两边都是能进能出；

双向队列
#!/usr/bin/env python
import collections
d = collections.deque()  #创建双向队列
d.append('1')           #deque的方法，默认是加在队列的右边
d.appendleft('10')      #加在队列的左边
d.appendleft('2')
d.append('4')
d.append('10')
print(d)
print(d.count('10'))   #打印出 2
d.extend(['yy', 'zz', 'rr', 'rrf', 'ggg'])   #在右边扩展队列
print(d)
d.extendleft(['xx', 'qq'])
print(d)
print(d.index('xx'))  # 找出某个元素的索引值，打印出1；第二和第三个参数放起始位置
d.insert(1,'11111')     # 在索引值为1的地方插入11111
print(d)
# 还有pop() popleft() remove() reverse()
d.rotate()      #rotate()  把最后一个元素移到首位 回转
print(d)

D:\Python36\python.exe D:/pythonproject/d1/test111.py
deque(['2', '10', '1', '4', '10'])
2
deque(['2', '10', '1', '4', '10', 'yy', 'zz', 'rr', 'rrf', 'ggg'])
deque(['qq', 'xx', '2', '10', '1', '4', '10', 'yy', 'zz', 'rr', 'rrf', 'ggg'])
1
deque(['qq', '11111', 'xx', '2', '10', '1', '4', '10', 'yy', 'zz', 'rr', 'rrf', 'ggg'])
deque(['ggg', 'qq', '11111', 'xx', '2', '10', '1', '4', '10', 'yy', 'zz', 'rr', 'rrf'])

Process finished with exit code 0

单向队列

#!/usr/bin/env python
import queue      #注意引用的模块不同，不是collections
q = queue.Queue()  #创建单项队列
q.put('aaa')
q.put('123')  # 插入数据
q.put('789')
print(q)
print(q.qsize())   #输出队列里面元素的个数
print(q.get())     # 从队列中取数据，只能先进先出,这里打印出aaa









